#!/bin/bash

# =======================================================
# Open edX Tutor Installation Script
# T·ª± ƒë·ªông x√≥a h·∫øt v√† c√†i l·∫°i Open edX t·ª´ ƒë·∫ßu
# =======================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üöÄ B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Open edX..."

# =======================================================
# KI·ªÇM TRA Y√äU C·∫¶U H·ªÜ TH·ªêNG
# =======================================================

print_status "Ki·ªÉm tra Docker v√† quy·ªÅn sudo..."

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    print_error "Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i Docker tr∆∞·ªõc!"
    exit 1
fi

# Check if we can run Docker with sudo
if ! sudo docker --version &> /dev/null; then
    print_error "Kh√¥ng th·ªÉ ch·∫°y Docker v·ªõi sudo. Ki·ªÉm tra quy·ªÅn!"
    exit 1
fi

# Install python3-venv if not available
print_status "C√†i ƒë·∫∑t python3-venv..."
sudo apt update -qq
sudo apt install -y python3-venv python3-full

# Add user to docker group if not already in it
if ! groups $USER | grep -q '\bdocker\b'; then
    print_status "Th√™m user v√†o docker group..."
    sudo usermod -aG docker $USER
    print_success "ƒê√£ th√™m user v√†o docker group. C·∫ßn logout/login l·∫°i sau khi script ch·∫°y xong."
fi

print_success "Docker v√† sudo ƒë√£ s·∫µn s√†ng"

# =======================================================
# B∆Ø·ªöC 1: X√ìA H·∫æT M·ªåI TH·ª®
# =======================================================

print_status "ƒêang x√≥a h·∫øt containers, images, volumes..."

# Stop all containers
sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true

# Remove all containers
sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true

# Remove all images
sudo docker rmi $(sudo docker images -q) 2>/dev/null || true

# Remove all volumes
sudo docker volume prune -f 2>/dev/null || true

# Remove all networks
sudo docker network prune -f 2>/dev/null || true

# System cleanup
sudo docker system prune -af --volumes 2>/dev/null || true

print_success "ƒê√£ x√≥a h·∫øt Docker containers, images v√† volumes"

# =======================================================
# B∆Ø·ªöC 2: X√ìA C·∫§U H√åNH TUTOR
# =======================================================

print_status "ƒêang x√≥a c·∫•u h√¨nh Tutor c≈©..."

# Remove Tutor config directories
sudo rm -rf ~/.local/share/tutor/ 2>/dev/null || true
sudo rm -rf /root/.local/share/tutor/ 2>/dev/null || true
rm -rf ~/.local/share/tutor/ 2>/dev/null || true

# Remove virtual environment
if [ -d "venv" ]; then
    sudo rm -rf venv/ 2>/dev/null || rm -rf venv/ 2>/dev/null || true
    print_success "ƒê√£ x√≥a virtual environment"
fi

print_success "ƒê√£ x√≥a c·∫•u h√¨nh Tutor"

# =======================================================
# B∆Ø·ªöC 3: T·∫†O L·∫†I VIRTUAL ENVIRONMENT
# =======================================================

print_status "ƒêang t·∫°o virtual environment m·ªõi..."

python3 -m venv venv
source venv/bin/activate

# Upgrade pip trong venv
./venv/bin/pip install --upgrade pip

print_success "ƒê√£ t·∫°o virtual environment"

# =======================================================
# B∆Ø·ªöC 4: C√ÄI ƒê·∫∂T TUTOR
# =======================================================

print_status "ƒêang c√†i ƒë·∫∑t Tutor 20.0.0..."

./venv/bin/pip install "tutor[full]==20.0.0"

print_success "ƒê√£ c√†i ƒë·∫∑t Tutor"

# =======================================================
# B∆Ø·ªöC 5: C·∫§U H√åNH TUTOR
# =======================================================

print_status "ƒêang c·∫•u h√¨nh Tutor..."

# Auto-configure without interactive prompts
# Auto-configure with localhost and ports
./venv/bin/tutor config save 
  --set PLATFORM_NAME="hoc tien tuc" 
  --set CONTACT_EMAIL="conghuancse@gmail.com" 
  --set LMS_HOST="localhost:1433" 
  --set CMS_HOST="localhost:1434" 
  --set ENABLE_HTTPS=false 
  --set LANGUAGE_CODE="en" 
  --set CADDY_HTTP_PORT=1433 
  --set CADDY_HTTP_PORT_CMS=1434

print_success "ƒê√£ c·∫•u h√¨nh Tutor v·ªõi ports"

# =======================================================
# B∆Ø·ªöC 6: C·∫¨P NH·∫¨T /etc/hosts
# =======================================================

print_status "ƒêang c·∫≠p nh·∫≠t /etc/hosts..."

# Remove old entries
sudo sed -i '/local\.openedx\.io/d' /etc/hosts
sudo sed -i '/studio\.local\.openedx\.io/d' /etc/hosts
sudo sed -i '/meilisearch\.local\.openedx\.io/d' /etc/hosts
sudo sed -i '/apps\.local\.openedx\.io/d' /etc/hosts

# Add new entries
echo "127.0.0.1 local.openedx.io" | sudo tee -a /etc/hosts
echo "127.0.0.1 studio.local.openedx.io" | sudo tee -a /etc/hosts
echo "127.0.0.1 meilisearch.local.openedx.io" | sudo tee -a /etc/hosts
echo "127.0.0.1 apps.local.openedx.io" | sudo tee -a /etc/hosts

print_success "ƒê√£ c·∫≠p nh·∫≠t /etc/hosts"

# =======================================================
# B∆Ø·ªöC 7: KH·ªûI CH·∫†Y OPEN EDX
# =======================================================

print_status "ƒêang kh·ªüi ch·∫°y Open edX... (c√≥ th·ªÉ m·∫•t 10-15 ph√∫t)"

# Check if user is in docker group, if not use sudo
if groups | grep -q '\bdocker\b'; then
    ./venv/bin/tutor local launch --non-interactive
else
    sudo -E ./venv/bin/tutor local launch --non-interactive
fi

print_success "ƒê√£ kh·ªüi ch·∫°y Open edX"

# =======================================================
# B∆Ø·ªöC 8: T·∫†O T√ÄI KHO·∫¢N ADMIN
# =======================================================

print_status "ƒêang t·∫°o t√†i kho·∫£n admin..."

# Check if user is in docker group, if not use sudo
if groups | grep -q '\bdocker\b'; then
    ./venv/bin/tutor local do createuser --staff --superuser admin admin@duytan.edu.vn <<EOF
123123
123123
EOF
else
    sudo -E ./venv/bin/tutor local do createuser --staff --superuser admin admin@example.com <<EOF
123123
123123
EOF
fi

print_success "ƒê√£ t·∫°o t√†i kho·∫£n admin"

# =======================================================
# B∆Ø·ªöC 9: KI·ªÇM TRA TR·∫†NG TH√ÅI
# =======================================================

print_status "ƒêang ki·ªÉm tra tr·∫°ng th√°i..."

sleep 10

LMS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1433 || echo "000")
STUDIO_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1434 || echo "000")

# =======================================================
# HO√ÄN TH√ÄNH
# =======================================================

echo ""
echo "=============================================="
echo "üéâ C√ÄI ƒê·∫∂T OPEN EDX HO√ÄN T·∫§T!"
echo "=============================================="
echo ""
echo "üìö LMS (Learning Management System):"
echo "   URL: http://localhost:1433"
echo "   Status: $LMS_STATUS"
echo ""
echo "üè´ Studio (Course Management):"
echo "   URL: http://localhost:1434" 
echo "   Status: $STUDIO_STATUS"
echo ""
echo "üë§ Admin Account:"
echo "   Username: admin"
echo "   Password: 123123"
echo "   Email: admin@example.com"
echo ""
echo "üîç Other Services:"
echo "   Meilisearch: http://meilisearch.local.openedx.io"
echo "   Apps: http://apps.local.openedx.io"
echo ""
echo "üìã Useful Commands:"
echo "   Ki·ªÉm tra status: sudo $(which tutor) local status"
echo "   Xem logs: sudo $(which tutor) local logs [service]"
echo "   D·ª´ng: sudo $(which tutor) local stop" 
echo "   Kh·ªüi ƒë·ªông: sudo $(which tutor) local start"
echo ""

if [ "$LMS_STATUS" = "200" ] && [ "$STUDIO_STATUS" = "302" ]; then
    print_success "‚úÖ T·∫•t c·∫£ services ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!"
else
    print_warning "‚ö†Ô∏è  M·ªôt s·ªë services c√≥ th·ªÉ c·∫ßn th·ªùi gian ƒë·ªÉ kh·ªüi ƒë·ªông ho√†n to√†n"
fi

echo ""
echo "üöÄ B·∫°n c√≥ th·ªÉ truy c·∫≠p:"
echo "   - LMS: http://localhost:1433"
echo "   - Studio: http://localhost:1434"
echo "=============================================="
